"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var box = function box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) {
  return Buffer.from(_tweetnacl.default.box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey));
};

exports.box = box;

var openBox = function openBox(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) {
  var originalMessage = _tweetnacl.default.box.open(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey); // Returns null if decryption fails


  if (!originalMessage) {
    throw new Error("Failed to decrypt message");
  }

  return Buffer.from(originalMessage);
};

exports.openBox = openBox;

var signDetached = function signDetached(messageBytes, privateKeyBytes) {
  return Buffer.from(_tweetnacl.default.sign.detached(messageBytes, privateKeyBytes));
};

exports.signDetached = signDetached;
var verifyDetached = _tweetnacl.default.sign.detached.verify;
exports.verifyDetached = verifyDetached;

var getRandomBytes = function getRandomBytes(length) {
  return Buffer.from(_tweetnacl.default.randomBytes(length));
};

exports.getRandomBytes = getRandomBytes;

var getKeyPair = function getKeyPair(hashedSeed) {
  var _tweetnacl$sign$keyPa = _tweetnacl.default.sign.keyPair.fromSeed(hashedSeed),
      publicKey = _tweetnacl$sign$keyPa.publicKey,
      secretKey = _tweetnacl$sign$keyPa.secretKey;

  return {
    privateKeyBytes: Buffer.from(secretKey),
    publicKeyBytes: Buffer.from(publicKey)
  };
};

exports.getKeyPair = getKeyPair;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2NyeXB0by9uYWNsL3Nsb3cudHMiXSwibmFtZXMiOlsiYm94IiwibWVzc2FnZUluQnl0ZXMiLCJub25jZUluQnl0ZXMiLCJjb252ZXJ0ZWRQdWJsaWNLZXkiLCJjb252ZXJ0ZWRQcml2YXRlS2V5IiwiQnVmZmVyIiwiZnJvbSIsInR3ZWV0bmFjbCIsIm9wZW5Cb3giLCJjaXBoZXJCeXRlcyIsIm5vbmNlQnl0ZXMiLCJvcmlnaW5hbE1lc3NhZ2UiLCJvcGVuIiwiRXJyb3IiLCJzaWduRGV0YWNoZWQiLCJtZXNzYWdlQnl0ZXMiLCJwcml2YXRlS2V5Qnl0ZXMiLCJzaWduIiwiZGV0YWNoZWQiLCJ2ZXJpZnlEZXRhY2hlZCIsInZlcmlmeSIsImdldFJhbmRvbUJ5dGVzIiwibGVuZ3RoIiwicmFuZG9tQnl0ZXMiLCJnZXRLZXlQYWlyIiwiaGFzaGVkU2VlZCIsImtleVBhaXIiLCJmcm9tU2VlZCIsInB1YmxpY0tleSIsInNlY3JldEtleSIsInB1YmxpY0tleUJ5dGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7Ozs7QUFkQTs7Ozs7Ozs7Ozs7Ozs7QUFpQk8sSUFBTUEsR0FBeUIsR0FBRyxTQUE1QkEsR0FBNEIsQ0FDdkNDLGNBRHVDLEVBRXZDQyxZQUZ1QyxFQUd2Q0Msa0JBSHVDLEVBSXZDQyxtQkFKdUM7QUFBQSxTQU12Q0MsTUFBTSxDQUFDQyxJQUFQLENBQ0VDLG1CQUFVUCxHQUFWLENBQ0VDLGNBREYsRUFFRUMsWUFGRixFQUdFQyxrQkFIRixFQUlFQyxtQkFKRixDQURGLENBTnVDO0FBQUEsQ0FBbEM7Ozs7QUFlQSxJQUFNSSxPQUFpQyxHQUFHLFNBQXBDQSxPQUFvQyxDQUMvQ0MsV0FEK0MsRUFFL0NDLFVBRitDLEVBRy9DUCxrQkFIK0MsRUFJL0NDLG1CQUorQyxFQUs1QztBQUNILE1BQU1PLGVBQWUsR0FBR0osbUJBQVVQLEdBQVYsQ0FBY1ksSUFBZCxDQUN0QkgsV0FEc0IsRUFFdEJDLFVBRnNCLEVBR3RCUCxrQkFIc0IsRUFJdEJDLG1CQUpzQixDQUF4QixDQURHLENBT0g7OztBQUNBLE1BQUksQ0FBQ08sZUFBTCxFQUFzQjtBQUNwQixVQUFNLElBQUlFLEtBQUosQ0FBVSwyQkFBVixDQUFOO0FBQ0Q7O0FBRUQsU0FBT1IsTUFBTSxDQUFDQyxJQUFQLENBQVlLLGVBQVosQ0FBUDtBQUNELENBbEJNOzs7O0FBb0JBLElBQU1HLFlBQTJDLEdBQUcsU0FBOUNBLFlBQThDLENBQ3pEQyxZQUR5RCxFQUV6REMsZUFGeUQ7QUFBQSxTQUd0RFgsTUFBTSxDQUFDQyxJQUFQLENBQVlDLG1CQUFVVSxJQUFWLENBQWVDLFFBQWYsQ0FBd0JILFlBQXhCLEVBQXNDQyxlQUF0QyxDQUFaLENBSHNEO0FBQUEsQ0FBcEQ7OztBQUtBLElBQU1HLGNBQStDLEdBQzFEWixtQkFBVVUsSUFBVixDQUFlQyxRQUFmLENBQXdCRSxNQURuQjs7O0FBR0EsSUFBTUMsY0FBK0MsR0FBRyxTQUFsREEsY0FBa0QsQ0FBQUMsTUFBTTtBQUFBLFNBQ25FakIsTUFBTSxDQUFDQyxJQUFQLENBQVlDLG1CQUFVZ0IsV0FBVixDQUFzQkQsTUFBdEIsQ0FBWixDQURtRTtBQUFBLENBQTlEOzs7O0FBR0EsSUFBTUUsVUFBdUMsR0FBRyxTQUExQ0EsVUFBMEMsQ0FBQUMsVUFBVSxFQUFJO0FBQUEsOEJBQ2xDbEIsbUJBQVVVLElBQVYsQ0FBZVMsT0FBZixDQUF1QkMsUUFBdkIsQ0FBZ0NGLFVBQWhDLENBRGtDO0FBQUEsTUFDM0RHLFNBRDJELHlCQUMzREEsU0FEMkQ7QUFBQSxNQUNoREMsU0FEZ0QseUJBQ2hEQSxTQURnRDs7QUFHbkUsU0FBTztBQUNMYixJQUFBQSxlQUFlLEVBQUVYLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZdUIsU0FBWixDQURaO0FBRUxDLElBQUFBLGNBQWMsRUFBRXpCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZc0IsU0FBWjtBQUZYLEdBQVA7QUFJRCxDQVBNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCDCqSAyMDE4IExpc2sgRm91bmRhdGlvblxuICpcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXG4gKiBmb3IgbGljZW5zaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIFVubGVzcyBvdGhlcndpc2UgYWdyZWVkIGluIGEgY3VzdG9tIGxpY2Vuc2luZyBhZ3JlZW1lbnQgd2l0aCB0aGUgTGlzayBGb3VuZGF0aW9uLFxuICogbm8gcGFydCBvZiB0aGlzIHNvZnR3YXJlLCBpbmNsdWRpbmcgdGhpcyBmaWxlLCBtYXkgYmUgY29waWVkLCBtb2RpZmllZCxcbiAqIHByb3BhZ2F0ZWQsIG9yIGRpc3RyaWJ1dGVkIGV4Y2VwdCBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIGNvbnRhaW5lZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZS5cbiAqXG4gKiBSZW1vdmFsIG9yIG1vZGlmaWNhdGlvbiBvZiB0aGlzIGNvcHlyaWdodCBub3RpY2UgaXMgcHJvaGliaXRlZC5cbiAqXG4gKi9cbmltcG9ydCB0d2VldG5hY2wgZnJvbSBcInR3ZWV0bmFjbFwiO1xuaW1wb3J0IHsgTmFjbEludGVyZmFjZSB9IGZyb20gXCIuL25hY2xfdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IGJveDogTmFjbEludGVyZmFjZVtcImJveFwiXSA9IChcbiAgbWVzc2FnZUluQnl0ZXMsXG4gIG5vbmNlSW5CeXRlcyxcbiAgY29udmVydGVkUHVibGljS2V5LFxuICBjb252ZXJ0ZWRQcml2YXRlS2V5XG4pID0+XG4gIEJ1ZmZlci5mcm9tKFxuICAgIHR3ZWV0bmFjbC5ib3goXG4gICAgICBtZXNzYWdlSW5CeXRlcyxcbiAgICAgIG5vbmNlSW5CeXRlcyxcbiAgICAgIGNvbnZlcnRlZFB1YmxpY0tleSxcbiAgICAgIGNvbnZlcnRlZFByaXZhdGVLZXlcbiAgICApXG4gICk7XG5cbmV4cG9ydCBjb25zdCBvcGVuQm94OiBOYWNsSW50ZXJmYWNlW1wib3BlbkJveFwiXSA9IChcbiAgY2lwaGVyQnl0ZXMsXG4gIG5vbmNlQnl0ZXMsXG4gIGNvbnZlcnRlZFB1YmxpY0tleSxcbiAgY29udmVydGVkUHJpdmF0ZUtleVxuKSA9PiB7XG4gIGNvbnN0IG9yaWdpbmFsTWVzc2FnZSA9IHR3ZWV0bmFjbC5ib3gub3BlbihcbiAgICBjaXBoZXJCeXRlcyxcbiAgICBub25jZUJ5dGVzLFxuICAgIGNvbnZlcnRlZFB1YmxpY0tleSxcbiAgICBjb252ZXJ0ZWRQcml2YXRlS2V5XG4gICk7XG4gIC8vIFJldHVybnMgbnVsbCBpZiBkZWNyeXB0aW9uIGZhaWxzXG4gIGlmICghb3JpZ2luYWxNZXNzYWdlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY3J5cHQgbWVzc2FnZVwiKTtcbiAgfVxuXG4gIHJldHVybiBCdWZmZXIuZnJvbShvcmlnaW5hbE1lc3NhZ2UpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNpZ25EZXRhY2hlZDogTmFjbEludGVyZmFjZVtcInNpZ25EZXRhY2hlZFwiXSA9IChcbiAgbWVzc2FnZUJ5dGVzLFxuICBwcml2YXRlS2V5Qnl0ZXNcbikgPT4gQnVmZmVyLmZyb20odHdlZXRuYWNsLnNpZ24uZGV0YWNoZWQobWVzc2FnZUJ5dGVzLCBwcml2YXRlS2V5Qnl0ZXMpKTtcblxuZXhwb3J0IGNvbnN0IHZlcmlmeURldGFjaGVkOiBOYWNsSW50ZXJmYWNlW1widmVyaWZ5RGV0YWNoZWRcIl0gPVxuICB0d2VldG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnk7XG5cbmV4cG9ydCBjb25zdCBnZXRSYW5kb21CeXRlczogTmFjbEludGVyZmFjZVtcImdldFJhbmRvbUJ5dGVzXCJdID0gbGVuZ3RoID0+XG4gIEJ1ZmZlci5mcm9tKHR3ZWV0bmFjbC5yYW5kb21CeXRlcyhsZW5ndGgpKTtcblxuZXhwb3J0IGNvbnN0IGdldEtleVBhaXI6IE5hY2xJbnRlcmZhY2VbXCJnZXRLZXlQYWlyXCJdID0gaGFzaGVkU2VlZCA9PiB7XG4gIGNvbnN0IHsgcHVibGljS2V5LCBzZWNyZXRLZXkgfSA9IHR3ZWV0bmFjbC5zaWduLmtleVBhaXIuZnJvbVNlZWQoaGFzaGVkU2VlZCk7XG5cbiAgcmV0dXJuIHtcbiAgICBwcml2YXRlS2V5Qnl0ZXM6IEJ1ZmZlci5mcm9tKHNlY3JldEtleSksXG4gICAgcHVibGljS2V5Qnl0ZXM6IEJ1ZmZlci5mcm9tKHB1YmxpY0tleSlcbiAgfTtcbn07XG4iXX0=