"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;

var _tweetnacl = _interopRequireDefault(require("tweetnacl"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var box = function box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) {
  return Buffer.from(_tweetnacl.default.box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey));
};

exports.box = box;

var openBox = function openBox(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) {
  var originalMessage = _tweetnacl.default.box.open(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey); // Returns null if decryption fails


  if (originalMessage === null) {
    throw new Error('Failed to decrypt message');
  }

  return Buffer.from(originalMessage);
};

exports.openBox = openBox;

var signDetached = function signDetached(messageBytes, privateKeyBytes) {
  return Buffer.from(_tweetnacl.default.sign.detached(messageBytes, privateKeyBytes));
};

exports.signDetached = signDetached;
var verifyDetached = _tweetnacl.default.sign.detached.verify;
exports.verifyDetached = verifyDetached;

var getRandomBytes = function getRandomBytes(length) {
  return Buffer.from(_tweetnacl.default.randomBytes(length));
};

exports.getRandomBytes = getRandomBytes;

var getKeyPair = function getKeyPair(hashedSeed) {
  var _tweetnacl$sign$keyPa = _tweetnacl.default.sign.keyPair.fromSeed(hashedSeed),
      publicKey = _tweetnacl$sign$keyPa.publicKey,
      secretKey = _tweetnacl$sign$keyPa.secretKey;

  return {
    privateKeyBytes: Buffer.from(secretKey),
    publicKeyBytes: Buffer.from(publicKey)
  };
};

exports.getKeyPair = getKeyPair;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2NyeXB0by9uYWNsL3Nsb3cudHMiXSwibmFtZXMiOlsiYm94IiwibWVzc2FnZUluQnl0ZXMiLCJub25jZUluQnl0ZXMiLCJjb252ZXJ0ZWRQdWJsaWNLZXkiLCJjb252ZXJ0ZWRQcml2YXRlS2V5IiwiQnVmZmVyIiwiZnJvbSIsInR3ZWV0bmFjbCIsIm9wZW5Cb3giLCJjaXBoZXJCeXRlcyIsIm5vbmNlQnl0ZXMiLCJvcmlnaW5hbE1lc3NhZ2UiLCJvcGVuIiwiRXJyb3IiLCJzaWduRGV0YWNoZWQiLCJtZXNzYWdlQnl0ZXMiLCJwcml2YXRlS2V5Qnl0ZXMiLCJzaWduIiwiZGV0YWNoZWQiLCJ2ZXJpZnlEZXRhY2hlZCIsInZlcmlmeSIsImdldFJhbmRvbUJ5dGVzIiwibGVuZ3RoIiwicmFuZG9tQnl0ZXMiLCJnZXRLZXlQYWlyIiwiaGFzaGVkU2VlZCIsImtleVBhaXIiLCJmcm9tU2VlZCIsInB1YmxpY0tleSIsInNlY3JldEtleSIsInB1YmxpY0tleUJ5dGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7Ozs7QUFkQTs7Ozs7Ozs7Ozs7Ozs7QUFpQk8sSUFBTUEsR0FBeUIsR0FBRyxTQUE1QkEsR0FBNEIsQ0FDeENDLGNBRHdDLEVBRXhDQyxZQUZ3QyxFQUd4Q0Msa0JBSHdDLEVBSXhDQyxtQkFKd0M7QUFBQSxTQU14Q0MsTUFBTSxDQUFDQyxJQUFQLENBQ0NDLG1CQUFVUCxHQUFWLENBQ0NDLGNBREQsRUFFQ0MsWUFGRCxFQUdDQyxrQkFIRCxFQUlDQyxtQkFKRCxDQURELENBTndDO0FBQUEsQ0FBbEM7Ozs7QUFlQSxJQUFNSSxPQUFpQyxHQUFHLFNBQXBDQSxPQUFvQyxDQUNoREMsV0FEZ0QsRUFFaERDLFVBRmdELEVBR2hEUCxrQkFIZ0QsRUFJaERDLG1CQUpnRCxFQUs1QztBQUNKLE1BQU1PLGVBQWUsR0FBR0osbUJBQVVQLEdBQVYsQ0FBY1ksSUFBZCxDQUN2QkgsV0FEdUIsRUFFdkJDLFVBRnVCLEVBR3ZCUCxrQkFIdUIsRUFJdkJDLG1CQUp1QixDQUF4QixDQURJLENBT0o7OztBQUNBLE1BQUlPLGVBQWUsS0FBSyxJQUF4QixFQUE4QjtBQUM3QixVQUFNLElBQUlFLEtBQUosQ0FBVSwyQkFBVixDQUFOO0FBQ0E7O0FBRUQsU0FBT1IsTUFBTSxDQUFDQyxJQUFQLENBQVlLLGVBQVosQ0FBUDtBQUNBLENBbEJNOzs7O0FBb0JBLElBQU1HLFlBQTJDLEdBQUcsU0FBOUNBLFlBQThDLENBQzFEQyxZQUQwRCxFQUUxREMsZUFGMEQ7QUFBQSxTQUd0RFgsTUFBTSxDQUFDQyxJQUFQLENBQVlDLG1CQUFVVSxJQUFWLENBQWVDLFFBQWYsQ0FBd0JILFlBQXhCLEVBQXNDQyxlQUF0QyxDQUFaLENBSHNEO0FBQUEsQ0FBcEQ7OztBQUtBLElBQU1HLGNBQStDLEdBQzNEWixtQkFBVVUsSUFBVixDQUFlQyxRQUFmLENBQXdCRSxNQURsQjs7O0FBR0EsSUFBTUMsY0FBK0MsR0FBRyxTQUFsREEsY0FBa0QsQ0FBQUMsTUFBTTtBQUFBLFNBQ3BFakIsTUFBTSxDQUFDQyxJQUFQLENBQVlDLG1CQUFVZ0IsV0FBVixDQUFzQkQsTUFBdEIsQ0FBWixDQURvRTtBQUFBLENBQTlEOzs7O0FBR0EsSUFBTUUsVUFBdUMsR0FBRyxTQUExQ0EsVUFBMEMsQ0FBQUMsVUFBVSxFQUFJO0FBQUEsOEJBQ25DbEIsbUJBQVVVLElBQVYsQ0FBZVMsT0FBZixDQUF1QkMsUUFBdkIsQ0FBZ0NGLFVBQWhDLENBRG1DO0FBQUEsTUFDNURHLFNBRDRELHlCQUM1REEsU0FENEQ7QUFBQSxNQUNqREMsU0FEaUQseUJBQ2pEQSxTQURpRDs7QUFHcEUsU0FBTztBQUNOYixJQUFBQSxlQUFlLEVBQUVYLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZdUIsU0FBWixDQURYO0FBRU5DLElBQUFBLGNBQWMsRUFBRXpCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZc0IsU0FBWjtBQUZWLEdBQVA7QUFJQSxDQVBNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCDCqSAyMDE4IExpc2sgRm91bmRhdGlvblxuICpcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXG4gKiBmb3IgbGljZW5zaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIFVubGVzcyBvdGhlcndpc2UgYWdyZWVkIGluIGEgY3VzdG9tIGxpY2Vuc2luZyBhZ3JlZW1lbnQgd2l0aCB0aGUgTGlzayBGb3VuZGF0aW9uLFxuICogbm8gcGFydCBvZiB0aGlzIHNvZnR3YXJlLCBpbmNsdWRpbmcgdGhpcyBmaWxlLCBtYXkgYmUgY29waWVkLCBtb2RpZmllZCxcbiAqIHByb3BhZ2F0ZWQsIG9yIGRpc3RyaWJ1dGVkIGV4Y2VwdCBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIGNvbnRhaW5lZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZS5cbiAqXG4gKiBSZW1vdmFsIG9yIG1vZGlmaWNhdGlvbiBvZiB0aGlzIGNvcHlyaWdodCBub3RpY2UgaXMgcHJvaGliaXRlZC5cbiAqXG4gKi9cbmltcG9ydCB0d2VldG5hY2wgZnJvbSAndHdlZXRuYWNsJztcbmltcG9ydCB7IE5hY2xJbnRlcmZhY2UgfSBmcm9tICcuL25hY2xfdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgYm94OiBOYWNsSW50ZXJmYWNlWydib3gnXSA9IChcblx0bWVzc2FnZUluQnl0ZXMsXG5cdG5vbmNlSW5CeXRlcyxcblx0Y29udmVydGVkUHVibGljS2V5LFxuXHRjb252ZXJ0ZWRQcml2YXRlS2V5LFxuKSA9PlxuXHRCdWZmZXIuZnJvbShcblx0XHR0d2VldG5hY2wuYm94KFxuXHRcdFx0bWVzc2FnZUluQnl0ZXMsXG5cdFx0XHRub25jZUluQnl0ZXMsXG5cdFx0XHRjb252ZXJ0ZWRQdWJsaWNLZXksXG5cdFx0XHRjb252ZXJ0ZWRQcml2YXRlS2V5LFxuXHRcdCksXG5cdCk7XG5cbmV4cG9ydCBjb25zdCBvcGVuQm94OiBOYWNsSW50ZXJmYWNlWydvcGVuQm94J10gPSAoXG5cdGNpcGhlckJ5dGVzLFxuXHRub25jZUJ5dGVzLFxuXHRjb252ZXJ0ZWRQdWJsaWNLZXksXG5cdGNvbnZlcnRlZFByaXZhdGVLZXksXG4pID0+IHtcblx0Y29uc3Qgb3JpZ2luYWxNZXNzYWdlID0gdHdlZXRuYWNsLmJveC5vcGVuKFxuXHRcdGNpcGhlckJ5dGVzLFxuXHRcdG5vbmNlQnl0ZXMsXG5cdFx0Y29udmVydGVkUHVibGljS2V5LFxuXHRcdGNvbnZlcnRlZFByaXZhdGVLZXksXG5cdCk7XG5cdC8vIFJldHVybnMgbnVsbCBpZiBkZWNyeXB0aW9uIGZhaWxzXG5cdGlmIChvcmlnaW5hbE1lc3NhZ2UgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBkZWNyeXB0IG1lc3NhZ2UnKTtcblx0fVxuXG5cdHJldHVybiBCdWZmZXIuZnJvbShvcmlnaW5hbE1lc3NhZ2UpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNpZ25EZXRhY2hlZDogTmFjbEludGVyZmFjZVsnc2lnbkRldGFjaGVkJ10gPSAoXG5cdG1lc3NhZ2VCeXRlcyxcblx0cHJpdmF0ZUtleUJ5dGVzLFxuKSA9PiBCdWZmZXIuZnJvbSh0d2VldG5hY2wuc2lnbi5kZXRhY2hlZChtZXNzYWdlQnl0ZXMsIHByaXZhdGVLZXlCeXRlcykpO1xuXG5leHBvcnQgY29uc3QgdmVyaWZ5RGV0YWNoZWQ6IE5hY2xJbnRlcmZhY2VbJ3ZlcmlmeURldGFjaGVkJ10gPVxuXHR0d2VldG5hY2wuc2lnbi5kZXRhY2hlZC52ZXJpZnk7XG5cbmV4cG9ydCBjb25zdCBnZXRSYW5kb21CeXRlczogTmFjbEludGVyZmFjZVsnZ2V0UmFuZG9tQnl0ZXMnXSA9IGxlbmd0aCA9PlxuXHRCdWZmZXIuZnJvbSh0d2VldG5hY2wucmFuZG9tQnl0ZXMobGVuZ3RoKSk7XG5cbmV4cG9ydCBjb25zdCBnZXRLZXlQYWlyOiBOYWNsSW50ZXJmYWNlWydnZXRLZXlQYWlyJ10gPSBoYXNoZWRTZWVkID0+IHtcblx0Y29uc3QgeyBwdWJsaWNLZXksIHNlY3JldEtleSB9ID0gdHdlZXRuYWNsLnNpZ24ua2V5UGFpci5mcm9tU2VlZChoYXNoZWRTZWVkKTtcblxuXHRyZXR1cm4ge1xuXHRcdHByaXZhdGVLZXlCeXRlczogQnVmZmVyLmZyb20oc2VjcmV0S2V5KSxcblx0XHRwdWJsaWNLZXlCeXRlczogQnVmZmVyLmZyb20ocHVibGljS2V5KSxcblx0fTtcbn07XG4iXX0=