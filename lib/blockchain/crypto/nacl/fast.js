"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = void 0;

var _sodiumNative = _interopRequireDefault(require("sodium-native"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
// tslint:disable-next-line no-implicit-dependencies
var box = function box(messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey) {
  var cipherBytes = Buffer.alloc(messageInBytes.length + _sodiumNative.default.crypto_box_MACBYTES);

  _sodiumNative.default.crypto_box_easy(cipherBytes, messageInBytes, nonceInBytes, convertedPublicKey, convertedPrivateKey);

  return cipherBytes;
};

exports.box = box;

var openBox = function openBox(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey) {
  var plainText = Buffer.alloc(cipherBytes.length - _sodiumNative.default.crypto_box_MACBYTES); // Returns false if decryption fails

  if (!_sodiumNative.default.crypto_box_open_easy(plainText, cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey)) {
    throw new Error('Failed to decrypt message');
  }

  return plainText;
};

exports.openBox = openBox;

var signDetached = function signDetached(messageBytes, privateKeyBytes) {
  var signatureBytes = Buffer.alloc(_sodiumNative.default.crypto_sign_BYTES);

  _sodiumNative.default.crypto_sign_detached(signatureBytes, messageBytes, privateKeyBytes);

  return signatureBytes;
};

exports.signDetached = signDetached;

var verifyDetached = function verifyDetached(messageBytes, signatureBytes, publicKeyBytes) {
  return _sodiumNative.default.crypto_sign_verify_detached(signatureBytes, messageBytes, publicKeyBytes);
};

exports.verifyDetached = verifyDetached;

var getRandomBytes = function getRandomBytes(length) {
  var nonce = Buffer.alloc(length);

  _sodiumNative.default.randombytes_buf(nonce);

  return nonce;
};

exports.getRandomBytes = getRandomBytes;

var getKeyPair = function getKeyPair(hashedSeed) {
  var publicKeyBytes = Buffer.alloc(_sodiumNative.default.crypto_sign_PUBLICKEYBYTES);
  var privateKeyBytes = Buffer.alloc(_sodiumNative.default.crypto_sign_SECRETKEYBYTES);

  _sodiumNative.default.crypto_sign_seed_keypair(publicKeyBytes, privateKeyBytes, hashedSeed);

  return {
    publicKeyBytes: publicKeyBytes,
    privateKeyBytes: privateKeyBytes
  };
};

exports.getKeyPair = getKeyPair;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2NyeXB0by9uYWNsL2Zhc3QudHMiXSwibmFtZXMiOlsiYm94IiwibWVzc2FnZUluQnl0ZXMiLCJub25jZUluQnl0ZXMiLCJjb252ZXJ0ZWRQdWJsaWNLZXkiLCJjb252ZXJ0ZWRQcml2YXRlS2V5IiwiY2lwaGVyQnl0ZXMiLCJCdWZmZXIiLCJhbGxvYyIsImxlbmd0aCIsInNvZGl1bSIsImNyeXB0b19ib3hfTUFDQllURVMiLCJjcnlwdG9fYm94X2Vhc3kiLCJvcGVuQm94Iiwibm9uY2VCeXRlcyIsInBsYWluVGV4dCIsImNyeXB0b19ib3hfb3Blbl9lYXN5IiwiRXJyb3IiLCJzaWduRGV0YWNoZWQiLCJtZXNzYWdlQnl0ZXMiLCJwcml2YXRlS2V5Qnl0ZXMiLCJzaWduYXR1cmVCeXRlcyIsImNyeXB0b19zaWduX0JZVEVTIiwiY3J5cHRvX3NpZ25fZGV0YWNoZWQiLCJ2ZXJpZnlEZXRhY2hlZCIsInB1YmxpY0tleUJ5dGVzIiwiY3J5cHRvX3NpZ25fdmVyaWZ5X2RldGFjaGVkIiwiZ2V0UmFuZG9tQnl0ZXMiLCJub25jZSIsInJhbmRvbWJ5dGVzX2J1ZiIsImdldEtleVBhaXIiLCJoYXNoZWRTZWVkIiwiY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMiLCJjcnlwdG9fc2lnbl9TRUNSRVRLRVlCWVRFUyIsImNyeXB0b19zaWduX3NlZWRfa2V5cGFpciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQWVBOzs7O0FBZkE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7QUFJTyxJQUFNQSxHQUF5QixHQUFHLFNBQTVCQSxHQUE0QixDQUN4Q0MsY0FEd0MsRUFFeENDLFlBRndDLEVBR3hDQyxrQkFId0MsRUFJeENDLG1CQUp3QyxFQUtwQztBQUNKLE1BQU1DLFdBQVcsR0FBR0MsTUFBTSxDQUFDQyxLQUFQLENBQ25CTixjQUFjLENBQUNPLE1BQWYsR0FBd0JDLHNCQUFPQyxtQkFEWixDQUFwQjs7QUFHQUQsd0JBQU9FLGVBQVAsQ0FDQ04sV0FERCxFQUVDSixjQUZELEVBR0NDLFlBSEQsRUFJQ0Msa0JBSkQsRUFLQ0MsbUJBTEQ7O0FBUUEsU0FBT0MsV0FBUDtBQUNBLENBbEJNOzs7O0FBb0JBLElBQU1PLE9BQWlDLEdBQUcsU0FBcENBLE9BQW9DLENBQ2hEUCxXQURnRCxFQUVoRFEsVUFGZ0QsRUFHaERWLGtCQUhnRCxFQUloREMsbUJBSmdELEVBSzVDO0FBQ0osTUFBTVUsU0FBUyxHQUFHUixNQUFNLENBQUNDLEtBQVAsQ0FDakJGLFdBQVcsQ0FBQ0csTUFBWixHQUFxQkMsc0JBQU9DLG1CQURYLENBQWxCLENBREksQ0FJSjs7QUFDQSxNQUNDLENBQUNELHNCQUFPTSxvQkFBUCxDQUNBRCxTQURBLEVBRUFULFdBRkEsRUFHQVEsVUFIQSxFQUlBVixrQkFKQSxFQUtBQyxtQkFMQSxDQURGLEVBUUU7QUFDRCxVQUFNLElBQUlZLEtBQUosQ0FBVSwyQkFBVixDQUFOO0FBQ0E7O0FBRUQsU0FBT0YsU0FBUDtBQUNBLENBdkJNOzs7O0FBeUJBLElBQU1HLFlBQTJDLEdBQUcsU0FBOUNBLFlBQThDLENBQzFEQyxZQUQwRCxFQUUxREMsZUFGMEQsRUFHdEQ7QUFDSixNQUFNQyxjQUFjLEdBQUdkLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhRSxzQkFBT1ksaUJBQXBCLENBQXZCOztBQUNBWix3QkFBT2Esb0JBQVAsQ0FBNEJGLGNBQTVCLEVBQTRDRixZQUE1QyxFQUEwREMsZUFBMUQ7O0FBRUEsU0FBT0MsY0FBUDtBQUNBLENBUk07Ozs7QUFVQSxJQUFNRyxjQUErQyxHQUFHLFNBQWxEQSxjQUFrRCxDQUM5REwsWUFEOEQsRUFFOURFLGNBRjhELEVBRzlESSxjQUg4RDtBQUFBLFNBSzlEZixzQkFBT2dCLDJCQUFQLENBQ0NMLGNBREQsRUFFQ0YsWUFGRCxFQUdDTSxjQUhELENBTDhEO0FBQUEsQ0FBeEQ7Ozs7QUFXQSxJQUFNRSxjQUErQyxHQUFHLFNBQWxEQSxjQUFrRCxDQUFBbEIsTUFBTSxFQUFJO0FBQ3hFLE1BQU1tQixLQUFLLEdBQUdyQixNQUFNLENBQUNDLEtBQVAsQ0FBYUMsTUFBYixDQUFkOztBQUNBQyx3QkFBT21CLGVBQVAsQ0FBdUJELEtBQXZCOztBQUVBLFNBQU9BLEtBQVA7QUFDQSxDQUxNOzs7O0FBT0EsSUFBTUUsVUFBdUMsR0FBRyxTQUExQ0EsVUFBMEMsQ0FBQUMsVUFBVSxFQUFJO0FBQ3BFLE1BQU1OLGNBQWMsR0FBR2xCLE1BQU0sQ0FBQ0MsS0FBUCxDQUFhRSxzQkFBT3NCLDBCQUFwQixDQUF2QjtBQUNBLE1BQU1aLGVBQWUsR0FBR2IsTUFBTSxDQUFDQyxLQUFQLENBQWFFLHNCQUFPdUIsMEJBQXBCLENBQXhCOztBQUVBdkIsd0JBQU93Qix3QkFBUCxDQUFnQ1QsY0FBaEMsRUFBZ0RMLGVBQWhELEVBQWlFVyxVQUFqRTs7QUFFQSxTQUFPO0FBQ05OLElBQUFBLGNBQWMsRUFBZEEsY0FETTtBQUVOTCxJQUFBQSxlQUFlLEVBQWZBO0FBRk0sR0FBUDtBQUlBLENBVk0iLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIDIwMTggTGlzayBGb3VuZGF0aW9uXG4gKlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogVW5sZXNzIG90aGVyd2lzZSBhZ3JlZWQgaW4gYSBjdXN0b20gbGljZW5zaW5nIGFncmVlbWVudCB3aXRoIHRoZSBMaXNrIEZvdW5kYXRpb24sXG4gKiBubyBwYXJ0IG9mIHRoaXMgc29mdHdhcmUsIGluY2x1ZGluZyB0aGlzIGZpbGUsIG1heSBiZSBjb3BpZWQsIG1vZGlmaWVkLFxuICogcHJvcGFnYXRlZCwgb3IgZGlzdHJpYnV0ZWQgZXhjZXB0IGFjY29yZGluZyB0byB0aGUgdGVybXMgY29udGFpbmVkIGluIHRoZVxuICogTElDRU5TRSBmaWxlLlxuICpcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxuICpcbiAqL1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIG5vLWltcGxpY2l0LWRlcGVuZGVuY2llc1xuaW1wb3J0IHNvZGl1bSBmcm9tICdzb2RpdW0tbmF0aXZlJztcbmltcG9ydCB7IE5hY2xJbnRlcmZhY2UgfSBmcm9tICcuL25hY2xfdHlwZXMnO1xuXG5leHBvcnQgY29uc3QgYm94OiBOYWNsSW50ZXJmYWNlWydib3gnXSA9IChcblx0bWVzc2FnZUluQnl0ZXMsXG5cdG5vbmNlSW5CeXRlcyxcblx0Y29udmVydGVkUHVibGljS2V5LFxuXHRjb252ZXJ0ZWRQcml2YXRlS2V5LFxuKSA9PiB7XG5cdGNvbnN0IGNpcGhlckJ5dGVzID0gQnVmZmVyLmFsbG9jKFxuXHRcdG1lc3NhZ2VJbkJ5dGVzLmxlbmd0aCArIHNvZGl1bS5jcnlwdG9fYm94X01BQ0JZVEVTLFxuXHQpO1xuXHRzb2RpdW0uY3J5cHRvX2JveF9lYXN5KFxuXHRcdGNpcGhlckJ5dGVzLFxuXHRcdG1lc3NhZ2VJbkJ5dGVzLFxuXHRcdG5vbmNlSW5CeXRlcyxcblx0XHRjb252ZXJ0ZWRQdWJsaWNLZXksXG5cdFx0Y29udmVydGVkUHJpdmF0ZUtleSxcblx0KTtcblxuXHRyZXR1cm4gY2lwaGVyQnl0ZXM7XG59O1xuXG5leHBvcnQgY29uc3Qgb3BlbkJveDogTmFjbEludGVyZmFjZVsnb3BlbkJveCddID0gKFxuXHRjaXBoZXJCeXRlcyxcblx0bm9uY2VCeXRlcyxcblx0Y29udmVydGVkUHVibGljS2V5LFxuXHRjb252ZXJ0ZWRQcml2YXRlS2V5LFxuKSA9PiB7XG5cdGNvbnN0IHBsYWluVGV4dCA9IEJ1ZmZlci5hbGxvYyhcblx0XHRjaXBoZXJCeXRlcy5sZW5ndGggLSBzb2RpdW0uY3J5cHRvX2JveF9NQUNCWVRFUyxcblx0KTtcblx0Ly8gUmV0dXJucyBmYWxzZSBpZiBkZWNyeXB0aW9uIGZhaWxzXG5cdGlmIChcblx0XHQhc29kaXVtLmNyeXB0b19ib3hfb3Blbl9lYXN5KFxuXHRcdFx0cGxhaW5UZXh0LFxuXHRcdFx0Y2lwaGVyQnl0ZXMsXG5cdFx0XHRub25jZUJ5dGVzLFxuXHRcdFx0Y29udmVydGVkUHVibGljS2V5LFxuXHRcdFx0Y29udmVydGVkUHJpdmF0ZUtleSxcblx0XHQpXG5cdCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGRlY3J5cHQgbWVzc2FnZScpO1xuXHR9XG5cblx0cmV0dXJuIHBsYWluVGV4dDtcbn07XG5cbmV4cG9ydCBjb25zdCBzaWduRGV0YWNoZWQ6IE5hY2xJbnRlcmZhY2VbJ3NpZ25EZXRhY2hlZCddID0gKFxuXHRtZXNzYWdlQnl0ZXMsXG5cdHByaXZhdGVLZXlCeXRlcyxcbikgPT4ge1xuXHRjb25zdCBzaWduYXR1cmVCeXRlcyA9IEJ1ZmZlci5hbGxvYyhzb2RpdW0uY3J5cHRvX3NpZ25fQllURVMpO1xuXHRzb2RpdW0uY3J5cHRvX3NpZ25fZGV0YWNoZWQoc2lnbmF0dXJlQnl0ZXMsIG1lc3NhZ2VCeXRlcywgcHJpdmF0ZUtleUJ5dGVzKTtcblxuXHRyZXR1cm4gc2lnbmF0dXJlQnl0ZXM7XG59O1xuXG5leHBvcnQgY29uc3QgdmVyaWZ5RGV0YWNoZWQ6IE5hY2xJbnRlcmZhY2VbJ3ZlcmlmeURldGFjaGVkJ10gPSAoXG5cdG1lc3NhZ2VCeXRlcyxcblx0c2lnbmF0dXJlQnl0ZXMsXG5cdHB1YmxpY0tleUJ5dGVzLFxuKSA9PlxuXHRzb2RpdW0uY3J5cHRvX3NpZ25fdmVyaWZ5X2RldGFjaGVkKFxuXHRcdHNpZ25hdHVyZUJ5dGVzLFxuXHRcdG1lc3NhZ2VCeXRlcyxcblx0XHRwdWJsaWNLZXlCeXRlcyxcblx0KTtcblxuZXhwb3J0IGNvbnN0IGdldFJhbmRvbUJ5dGVzOiBOYWNsSW50ZXJmYWNlWydnZXRSYW5kb21CeXRlcyddID0gbGVuZ3RoID0+IHtcblx0Y29uc3Qgbm9uY2UgPSBCdWZmZXIuYWxsb2MobGVuZ3RoKTtcblx0c29kaXVtLnJhbmRvbWJ5dGVzX2J1Zihub25jZSk7XG5cblx0cmV0dXJuIG5vbmNlO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldEtleVBhaXI6IE5hY2xJbnRlcmZhY2VbJ2dldEtleVBhaXInXSA9IGhhc2hlZFNlZWQgPT4ge1xuXHRjb25zdCBwdWJsaWNLZXlCeXRlcyA9IEJ1ZmZlci5hbGxvYyhzb2RpdW0uY3J5cHRvX3NpZ25fUFVCTElDS0VZQllURVMpO1xuXHRjb25zdCBwcml2YXRlS2V5Qnl0ZXMgPSBCdWZmZXIuYWxsb2Moc29kaXVtLmNyeXB0b19zaWduX1NFQ1JFVEtFWUJZVEVTKTtcblxuXHRzb2RpdW0uY3J5cHRvX3NpZ25fc2VlZF9rZXlwYWlyKHB1YmxpY0tleUJ5dGVzLCBwcml2YXRlS2V5Qnl0ZXMsIGhhc2hlZFNlZWQpO1xuXG5cdHJldHVybiB7XG5cdFx0cHVibGljS2V5Qnl0ZXMsXG5cdFx0cHJpdmF0ZUtleUJ5dGVzLFxuXHR9O1xufTtcbiJdfQ==