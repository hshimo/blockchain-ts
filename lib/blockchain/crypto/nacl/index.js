"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getKeyPair = exports.getRandomBytes = exports.verifyDetached = exports.signDetached = exports.openBox = exports.box = exports.NACL_SIGN_SIGNATURE_LENGTH = exports.NACL_SIGN_PUBLICKEY_LENGTH = void 0;

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
// tslint:disable-next-line no-let
var lib;

try {
  if (process.env.NACL_FAST === 'disable') {
    throw new Error('Use tweetnacl');
  } // Require used for conditional importing
  // tslint:disable-next-line no-var-requires no-require-imports


  lib = require('./fast');
} catch (err) {
  process.env.NACL_FAST = 'disable'; // tslint:disable-next-line no-var-requires no-require-imports

  lib = require('./slow');
}

var NACL_SIGN_PUBLICKEY_LENGTH = 32;
exports.NACL_SIGN_PUBLICKEY_LENGTH = NACL_SIGN_PUBLICKEY_LENGTH;
var NACL_SIGN_SIGNATURE_LENGTH = 64;
exports.NACL_SIGN_SIGNATURE_LENGTH = NACL_SIGN_SIGNATURE_LENGTH;
var _lib = lib,
    box = _lib.box,
    openBox = _lib.openBox,
    signDetached = _lib.signDetached,
    verifyDetached = _lib.verifyDetached,
    getRandomBytes = _lib.getRandomBytes,
    getKeyPair = _lib.getKeyPair;
exports.getKeyPair = getKeyPair;
exports.getRandomBytes = getRandomBytes;
exports.verifyDetached = verifyDetached;
exports.signDetached = signDetached;
exports.openBox = openBox;
exports.box = box;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2NyeXB0by9uYWNsL2luZGV4LnRzIl0sIm5hbWVzIjpbImxpYiIsInByb2Nlc3MiLCJlbnYiLCJOQUNMX0ZBU1QiLCJFcnJvciIsInJlcXVpcmUiLCJlcnIiLCJOQUNMX1NJR05fUFVCTElDS0VZX0xFTkdUSCIsIk5BQ0xfU0lHTl9TSUdOQVRVUkVfTEVOR1RIIiwiYm94Iiwib3BlbkJveCIsInNpZ25EZXRhY2hlZCIsInZlcmlmeURldGFjaGVkIiwiZ2V0UmFuZG9tQnl0ZXMiLCJnZXRLZXlQYWlyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBZ0JBO0FBQ0EsSUFBSUEsR0FBSjs7QUFFQSxJQUFJO0FBQ0gsTUFBSUMsT0FBTyxDQUFDQyxHQUFSLENBQVlDLFNBQVosS0FBMEIsU0FBOUIsRUFBeUM7QUFDeEMsVUFBTSxJQUFJQyxLQUFKLENBQVUsZUFBVixDQUFOO0FBQ0EsR0FIRSxDQUlIO0FBQ0E7OztBQUNBSixFQUFBQSxHQUFHLEdBQUdLLE9BQU8sQ0FBQyxRQUFELENBQWI7QUFDQSxDQVBELENBT0UsT0FBT0MsR0FBUCxFQUFZO0FBQ2JMLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxTQUFaLEdBQXdCLFNBQXhCLENBRGEsQ0FFYjs7QUFDQUgsRUFBQUEsR0FBRyxHQUFHSyxPQUFPLENBQUMsUUFBRCxDQUFiO0FBQ0E7O0FBRU0sSUFBTUUsMEJBQTBCLEdBQUcsRUFBbkM7O0FBRUEsSUFBTUMsMEJBQTBCLEdBQUcsRUFBbkM7O1dBU0hSLEc7SUFOSFMsRyxRQUFBQSxHO0lBQ0FDLE8sUUFBQUEsTztJQUNBQyxZLFFBQUFBLFk7SUFDQUMsYyxRQUFBQSxjO0lBQ0FDLGMsUUFBQUEsYztJQUNBQyxVLFFBQUFBLFUiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IMKpIDIwMTggTGlzayBGb3VuZGF0aW9uXG4gKlxuICogU2VlIHRoZSBMSUNFTlNFIGZpbGUgYXQgdGhlIHRvcC1sZXZlbCBkaXJlY3Rvcnkgb2YgdGhpcyBkaXN0cmlidXRpb25cbiAqIGZvciBsaWNlbnNpbmcgaW5mb3JtYXRpb24uXG4gKlxuICogVW5sZXNzIG90aGVyd2lzZSBhZ3JlZWQgaW4gYSBjdXN0b20gbGljZW5zaW5nIGFncmVlbWVudCB3aXRoIHRoZSBMaXNrIEZvdW5kYXRpb24sXG4gKiBubyBwYXJ0IG9mIHRoaXMgc29mdHdhcmUsIGluY2x1ZGluZyB0aGlzIGZpbGUsIG1heSBiZSBjb3BpZWQsIG1vZGlmaWVkLFxuICogcHJvcGFnYXRlZCwgb3IgZGlzdHJpYnV0ZWQgZXhjZXB0IGFjY29yZGluZyB0byB0aGUgdGVybXMgY29udGFpbmVkIGluIHRoZVxuICogTElDRU5TRSBmaWxlLlxuICpcbiAqIFJlbW92YWwgb3IgbW9kaWZpY2F0aW9uIG9mIHRoaXMgY29weXJpZ2h0IG5vdGljZSBpcyBwcm9oaWJpdGVkLlxuICpcbiAqL1xuaW1wb3J0IHsgTmFjbEludGVyZmFjZSB9IGZyb20gJy4vbmFjbF90eXBlcyc7XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby1sZXRcbmxldCBsaWI6IE5hY2xJbnRlcmZhY2U7XG5cbnRyeSB7XG5cdGlmIChwcm9jZXNzLmVudi5OQUNMX0ZBU1QgPT09ICdkaXNhYmxlJykge1xuXHRcdHRocm93IG5ldyBFcnJvcignVXNlIHR3ZWV0bmFjbCcpO1xuXHR9XG5cdC8vIFJlcXVpcmUgdXNlZCBmb3IgY29uZGl0aW9uYWwgaW1wb3J0aW5nXG5cdC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZSBuby12YXItcmVxdWlyZXMgbm8tcmVxdWlyZS1pbXBvcnRzXG5cdGxpYiA9IHJlcXVpcmUoJy4vZmFzdCcpO1xufSBjYXRjaCAoZXJyKSB7XG5cdHByb2Nlc3MuZW52Lk5BQ0xfRkFTVCA9ICdkaXNhYmxlJztcblx0Ly8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lIG5vLXZhci1yZXF1aXJlcyBuby1yZXF1aXJlLWltcG9ydHNcblx0bGliID0gcmVxdWlyZSgnLi9zbG93Jyk7XG59XG5cbmV4cG9ydCBjb25zdCBOQUNMX1NJR05fUFVCTElDS0VZX0xFTkdUSCA9IDMyO1xuXG5leHBvcnQgY29uc3QgTkFDTF9TSUdOX1NJR05BVFVSRV9MRU5HVEggPSA2NDtcblxuZXhwb3J0IGNvbnN0IHtcblx0Ym94LFxuXHRvcGVuQm94LFxuXHRzaWduRGV0YWNoZWQsXG5cdHZlcmlmeURldGFjaGVkLFxuXHRnZXRSYW5kb21CeXRlcyxcblx0Z2V0S2V5UGFpcixcbn0gPSBsaWI7XG4iXX0=