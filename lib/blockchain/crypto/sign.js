"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifyData = exports.signData = exports.signDataWithPassphrase = exports.signDataWithPrivateKey = exports.verifyMessageWithPublicKey = exports.signMessageWithPassphrase = exports.digestMessage = void 0;

var _varuintBitcoin = require("varuint-bitcoin");

var _buffer = require("./buffer");

var _constants = require("./constants");

var _hash = require("./hash");

var _keys = require("./keys");

var _nacl = require("./nacl");

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var createHeader = function createHeader(text) {
  return "-----".concat(text, "-----");
};

var signedMessageHeader = createHeader('BEGIN LISK SIGNED MESSAGE');
var messageHeader = createHeader('MESSAGE');
var publicKeyHeader = createHeader('PUBLIC KEY');
var secondPublicKeyHeader = createHeader('SECOND PUBLIC KEY');
var signatureHeader = createHeader('SIGNATURE');
var secondSignatureHeader = createHeader('SECOND SIGNATURE');
var signatureFooter = createHeader('END LISK SIGNED MESSAGE');
var SIGNED_MESSAGE_PREFIX_BYTES = Buffer.from(_constants.SIGNED_MESSAGE_PREFIX, 'utf8');
var SIGNED_MESSAGE_PREFIX_LENGTH = (0, _varuintBitcoin.encode)(_constants.SIGNED_MESSAGE_PREFIX.length);

var digestMessage = function digestMessage(message) {
  var msgBytes = Buffer.from(message, 'utf8');
  var msgLenBytes = (0, _varuintBitcoin.encode)(message.length);
  var dataBytes = Buffer.concat([SIGNED_MESSAGE_PREFIX_LENGTH, SIGNED_MESSAGE_PREFIX_BYTES, msgLenBytes, msgBytes]);
  return (0, _hash.hash)((0, _hash.hash)(dataBytes));
};

exports.digestMessage = digestMessage;

var signMessageWithPassphrase = function signMessageWithPassphrase(message, passphrase) {
  var msgBytes = digestMessage(message);

  var _getPrivateAndPublicK = (0, _keys.getPrivateAndPublicKeyBytesFromPassphrase)(passphrase),
      privateKeyBytes = _getPrivateAndPublicK.privateKeyBytes,
      publicKeyBytes = _getPrivateAndPublicK.publicKeyBytes;

  var signature = (0, _nacl.signDetached)(msgBytes, privateKeyBytes);
  return {
    message: message,
    publicKey: (0, _buffer.bufferToHex)(publicKeyBytes),
    signature: (0, _buffer.bufferToHex)(signature)
  };
};

exports.signMessageWithPassphrase = signMessageWithPassphrase;

var verifyMessageWithPublicKey = function verifyMessageWithPublicKey(_ref) {
  var message = _ref.message,
      publicKey = _ref.publicKey,
      signature = _ref.signature;
  var msgBytes = digestMessage(message);
  var signatureBytes = (0, _buffer.hexToBuffer)(signature);
  var publicKeyBytes = (0, _buffer.hexToBuffer)(publicKey);

  if (publicKeyBytes.length !== _nacl.NACL_SIGN_PUBLICKEY_LENGTH) {
    throw new Error("Invalid publicKey, expected ".concat(_nacl.NACL_SIGN_PUBLICKEY_LENGTH, "-byte publicKey"));
  }

  if (signatureBytes.length !== _nacl.NACL_SIGN_SIGNATURE_LENGTH) {
    throw new Error("Invalid signature length, expected ".concat(_nacl.NACL_SIGN_SIGNATURE_LENGTH, "-byte signature"));
  }

  return (0, _nacl.verifyDetached)(msgBytes, signatureBytes, publicKeyBytes);
};

exports.verifyMessageWithPublicKey = verifyMessageWithPublicKey;

var signDataWithPrivateKey = function signDataWithPrivateKey(data, privateKey) {
  var signature = (0, _nacl.signDetached)(data, privateKey);
  return (0, _buffer.bufferToHex)(signature);
};

exports.signDataWithPrivateKey = signDataWithPrivateKey;

var signDataWithPassphrase = function signDataWithPassphrase(data, passphrase) {
  var _getPrivateAndPublicK2 = (0, _keys.getPrivateAndPublicKeyBytesFromPassphrase)(passphrase),
      privateKeyBytes = _getPrivateAndPublicK2.privateKeyBytes;

  return signDataWithPrivateKey(data, privateKeyBytes);
};

exports.signDataWithPassphrase = signDataWithPassphrase;
var signData = signDataWithPassphrase;
exports.signData = signData;

var verifyData = function verifyData(data, signature, publicKey) {
  return (0, _nacl.verifyDetached)(data, (0, _buffer.hexToBuffer)(signature), (0, _buffer.hexToBuffer)(publicKey));
};

exports.verifyData = verifyData;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,