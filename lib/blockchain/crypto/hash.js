"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hash = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _buffer = require("./buffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var cryptoHashSha256 = function cryptoHashSha256(data) {
  var dataHash = _crypto.default.createHash('sha256');

  dataHash.update(data);
  return dataHash.digest();
};

var hash = function hash(data, format) {
  if (Buffer.isBuffer(data)) {
    return cryptoHashSha256(data);
  }

  if (typeof data === 'string' && typeof format === 'string') {
    if (!['utf8', 'hex'].includes(format)) {
      throw new Error('Unsupported string format. Currently only `hex` and `utf8` are supported.');
    }

    var encoded = format === 'utf8' ? Buffer.from(data, 'utf8') : (0, _buffer.hexToBuffer)(data);
    return cryptoHashSha256(encoded);
  }

  throw new Error('Unsupported data format. Currently only Buffers or `hex` and `utf8` strings are supported.');
};

exports.hash = hash;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ibG9ja2NoYWluL2NyeXB0by9oYXNoLnRzIl0sIm5hbWVzIjpbImNyeXB0b0hhc2hTaGEyNTYiLCJkYXRhIiwiZGF0YUhhc2giLCJjcnlwdG8iLCJjcmVhdGVIYXNoIiwidXBkYXRlIiwiZGlnZXN0IiwiaGFzaCIsImZvcm1hdCIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiaW5jbHVkZXMiLCJFcnJvciIsImVuY29kZWQiLCJmcm9tIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBY0E7O0FBQ0E7Ozs7QUFmQTs7Ozs7Ozs7Ozs7Ozs7QUFpQkEsSUFBTUEsZ0JBQWdCLEdBQUcsU0FBbkJBLGdCQUFtQixDQUFDQyxJQUFELEVBQTBCO0FBQ2xELE1BQU1DLFFBQVEsR0FBR0MsZ0JBQU9DLFVBQVAsQ0FBa0IsUUFBbEIsQ0FBakI7O0FBQ0FGLEVBQUFBLFFBQVEsQ0FBQ0csTUFBVCxDQUFnQkosSUFBaEI7QUFFQSxTQUFPQyxRQUFRLENBQUNJLE1BQVQsRUFBUDtBQUNBLENBTEQ7O0FBT08sSUFBTUMsSUFBSSxHQUFHLFNBQVBBLElBQU8sQ0FBQ04sSUFBRCxFQUF3Qk8sTUFBeEIsRUFBb0Q7QUFDdkUsTUFBSUMsTUFBTSxDQUFDQyxRQUFQLENBQWdCVCxJQUFoQixDQUFKLEVBQTJCO0FBQzFCLFdBQU9ELGdCQUFnQixDQUFDQyxJQUFELENBQXZCO0FBQ0E7O0FBRUQsTUFBSSxPQUFPQSxJQUFQLEtBQWdCLFFBQWhCLElBQTRCLE9BQU9PLE1BQVAsS0FBa0IsUUFBbEQsRUFBNEQ7QUFDM0QsUUFBSSxDQUFDLENBQUMsTUFBRCxFQUFTLEtBQVQsRUFBZ0JHLFFBQWhCLENBQXlCSCxNQUF6QixDQUFMLEVBQXVDO0FBQ3RDLFlBQU0sSUFBSUksS0FBSixDQUNMLDJFQURLLENBQU47QUFHQTs7QUFDRCxRQUFNQyxPQUFPLEdBQ1pMLE1BQU0sS0FBSyxNQUFYLEdBQW9CQyxNQUFNLENBQUNLLElBQVAsQ0FBWWIsSUFBWixFQUFrQixNQUFsQixDQUFwQixHQUFnRCx5QkFBWUEsSUFBWixDQURqRDtBQUdBLFdBQU9ELGdCQUFnQixDQUFDYSxPQUFELENBQXZCO0FBQ0E7O0FBRUQsUUFBTSxJQUFJRCxLQUFKLENBQ0wsNEZBREssQ0FBTjtBQUdBLENBcEJNIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCDCqSAyMDE4IExpc2sgRm91bmRhdGlvblxuICpcbiAqIFNlZSB0aGUgTElDRU5TRSBmaWxlIGF0IHRoZSB0b3AtbGV2ZWwgZGlyZWN0b3J5IG9mIHRoaXMgZGlzdHJpYnV0aW9uXG4gKiBmb3IgbGljZW5zaW5nIGluZm9ybWF0aW9uLlxuICpcbiAqIFVubGVzcyBvdGhlcndpc2UgYWdyZWVkIGluIGEgY3VzdG9tIGxpY2Vuc2luZyBhZ3JlZW1lbnQgd2l0aCB0aGUgTGlzayBGb3VuZGF0aW9uLFxuICogbm8gcGFydCBvZiB0aGlzIHNvZnR3YXJlLCBpbmNsdWRpbmcgdGhpcyBmaWxlLCBtYXkgYmUgY29waWVkLCBtb2RpZmllZCxcbiAqIHByb3BhZ2F0ZWQsIG9yIGRpc3RyaWJ1dGVkIGV4Y2VwdCBhY2NvcmRpbmcgdG8gdGhlIHRlcm1zIGNvbnRhaW5lZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZS5cbiAqXG4gKiBSZW1vdmFsIG9yIG1vZGlmaWNhdGlvbiBvZiB0aGlzIGNvcHlyaWdodCBub3RpY2UgaXMgcHJvaGliaXRlZC5cbiAqXG4gKi9cbmltcG9ydCBjcnlwdG8gZnJvbSAnY3J5cHRvJztcbmltcG9ydCB7IGhleFRvQnVmZmVyIH0gZnJvbSAnLi9idWZmZXInO1xuXG5jb25zdCBjcnlwdG9IYXNoU2hhMjU2ID0gKGRhdGE6IEJ1ZmZlcik6IEJ1ZmZlciA9PiB7XG5cdGNvbnN0IGRhdGFIYXNoID0gY3J5cHRvLmNyZWF0ZUhhc2goJ3NoYTI1NicpO1xuXHRkYXRhSGFzaC51cGRhdGUoZGF0YSk7XG5cblx0cmV0dXJuIGRhdGFIYXNoLmRpZ2VzdCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IGhhc2ggPSAoZGF0YTogQnVmZmVyIHwgc3RyaW5nLCBmb3JtYXQ/OiBzdHJpbmcpOiBCdWZmZXIgPT4ge1xuXHRpZiAoQnVmZmVyLmlzQnVmZmVyKGRhdGEpKSB7XG5cdFx0cmV0dXJuIGNyeXB0b0hhc2hTaGEyNTYoZGF0YSk7XG5cdH1cblxuXHRpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnICYmIHR5cGVvZiBmb3JtYXQgPT09ICdzdHJpbmcnKSB7XG5cdFx0aWYgKCFbJ3V0ZjgnLCAnaGV4J10uaW5jbHVkZXMoZm9ybWF0KSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKFxuXHRcdFx0XHQnVW5zdXBwb3J0ZWQgc3RyaW5nIGZvcm1hdC4gQ3VycmVudGx5IG9ubHkgYGhleGAgYW5kIGB1dGY4YCBhcmUgc3VwcG9ydGVkLicsXG5cdFx0XHQpO1xuXHRcdH1cblx0XHRjb25zdCBlbmNvZGVkID1cblx0XHRcdGZvcm1hdCA9PT0gJ3V0ZjgnID8gQnVmZmVyLmZyb20oZGF0YSwgJ3V0ZjgnKSA6IGhleFRvQnVmZmVyKGRhdGEpO1xuXG5cdFx0cmV0dXJuIGNyeXB0b0hhc2hTaGEyNTYoZW5jb2RlZCk7XG5cdH1cblxuXHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0J1Vuc3VwcG9ydGVkIGRhdGEgZm9ybWF0LiBDdXJyZW50bHkgb25seSBCdWZmZXJzIG9yIGBoZXhgIGFuZCBgdXRmOGAgc3RyaW5ncyBhcmUgc3VwcG9ydGVkLicsXG5cdCk7XG59O1xuIl19