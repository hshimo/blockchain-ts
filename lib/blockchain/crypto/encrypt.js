"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.decryptPassphraseWithPassword = exports.encryptPassphraseWithPassword = exports.decryptMessageWithPassphrase = exports.encryptMessageWithPassphrase = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _buffer = require("./buffer");

var _convert = require("./convert");

var _keys = require("./keys");

var _nacl = require("./nacl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/*
 * Copyright Â© 2018 Lisk Foundation
 *
 * See the LICENSE file at the top-level directory of this distribution
 * for licensing information.
 *
 * Unless otherwise agreed in a custom licensing agreement with the Lisk Foundation,
 * no part of this software, including this file, may be copied, modified,
 * propagated, or distributed except according to the terms contained in the
 * LICENSE file.
 *
 * Removal or modification of this copyright notice is prohibited.
 *
 */
var PBKDF2_ITERATIONS = 1e6;
var PBKDF2_KEYLEN = 32;
var PBKDF2_HASH_FUNCTION = "sha256";
var ENCRYPTION_VERSION = "1";

var encryptMessageWithPassphrase = function encryptMessageWithPassphrase(message, passphrase, recipientPublicKey) {
  var _getPrivateAndPublicK = (0, _keys.getPrivateAndPublicKeyBytesFromPassphrase)(passphrase),
      senderPrivateKeyBytes = _getPrivateAndPublicK.privateKeyBytes,
      senderPublicKeyBytes = _getPrivateAndPublicK.publicKeyBytes;

  var convertedPrivateKey = Buffer.from((0, _convert.convertPrivateKeyEd2Curve)(senderPrivateKeyBytes));
  var convertedSenderPublicKey = (0, _buffer.bufferToHex)(senderPublicKeyBytes);
  var recipientPublicKeyBytes = (0, _buffer.hexToBuffer)(recipientPublicKey);
  var messageInBytes = Buffer.from(message, "utf8");
  var nonceSize = 24;
  var nonce = (0, _nacl.getRandomBytes)(nonceSize);
  var publicKeyUint8Array = (0, _convert.convertPublicKeyEd2Curve)(recipientPublicKeyBytes); // This cannot be reproduced, but external library have type union with null

  if (publicKeyUint8Array === null) {
    throw new Error("given public key is not a valid Ed25519 public key");
  }

  var convertedPublicKey = Buffer.from(publicKeyUint8Array);
  var cipherBytes = (0, _nacl.box)(messageInBytes, nonce, convertedPublicKey, convertedPrivateKey);
  var nonceHex = (0, _buffer.bufferToHex)(nonce);
  var encryptedMessage = (0, _buffer.bufferToHex)(cipherBytes);
  return {
    nonce: nonceHex,
    encryptedMessage: encryptedMessage,
    senderPublickey: convertedSenderPublicKey
  };
};

exports.encryptMessageWithPassphrase = encryptMessageWithPassphrase;

var decryptMessageWithPassphrase = function decryptMessageWithPassphrase(cipherHex, nonce, passphrase, senderPublicKey) {
  var _getPrivateAndPublicK2 = (0, _keys.getPrivateAndPublicKeyBytesFromPassphrase)(passphrase),
      recipientPrivateKeyBytes = _getPrivateAndPublicK2.privateKeyBytes;

  var convertedPrivateKey = Buffer.from((0, _convert.convertPrivateKeyEd2Curve)(recipientPrivateKeyBytes));
  var senderPublicKeyBytes = (0, _buffer.hexToBuffer)(senderPublicKey);
  var cipherBytes = (0, _buffer.hexToBuffer)(cipherHex);
  var nonceBytes = (0, _buffer.hexToBuffer)(nonce);
  var publicKeyUint8Array = (0, _convert.convertPublicKeyEd2Curve)(senderPublicKeyBytes);

  if (!publicKeyUint8Array) {
    throw new Error("given public key is not a valid Ed25519 public key");
  }

  var convertedPublicKey = Buffer.from(publicKeyUint8Array);

  try {
    var decoded = (0, _nacl.openBox)(cipherBytes, nonceBytes, convertedPublicKey, convertedPrivateKey);
    return Buffer.from(decoded).toString();
  } catch (error) {
    if (error.message.match(/bad nonce size|nonce must be a buffer of size crypto_box_NONCEBYTES/)) {
      throw new Error("Expected nonce to be 24 bytes.");
    }

    throw new Error("Something went wrong during decryption. Is this the full encrypted message?");
  }
};

exports.decryptMessageWithPassphrase = decryptMessageWithPassphrase;

var getKeyFromPassword = function getKeyFromPassword(password, salt, iterations) {
  return _crypto.default.pbkdf2Sync(password, salt, iterations, PBKDF2_KEYLEN, PBKDF2_HASH_FUNCTION);
};

var encryptAES256GCMWithPassword = function encryptAES256GCMWithPassword(plainText, password) {
  var iterations = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : PBKDF2_ITERATIONS;
  var IV_BUFFER_SIZE = 12;
  var SALT_BUFFER_SIZE = 16;

  var iv = _crypto.default.randomBytes(IV_BUFFER_SIZE);

  var salt = _crypto.default.randomBytes(SALT_BUFFER_SIZE);

  var key = getKeyFromPassword(password, salt, iterations);

  var cipher = _crypto.default.createCipheriv("aes-256-gcm", key, iv);

  var firstBlock = cipher.update(plainText, "utf8");
  var encrypted = Buffer.concat([firstBlock, cipher.final()]);
  var tag = cipher.getAuthTag();
  return {
    iterations: iterations,
    cipherText: encrypted.toString("hex"),
    iv: iv.toString("hex"),
    salt: salt.toString("hex"),
    tag: tag.toString("hex"),
    version: ENCRYPTION_VERSION
  };
};

var getTagBuffer = function getTagBuffer(tag) {
  var TAG_BUFFER_SIZE = 16;
  var tagBuffer = (0, _buffer.hexToBuffer)(tag, "Tag");

  if (tagBuffer.length !== TAG_BUFFER_SIZE) {
    throw new Error("Tag must be 16 bytes.");
  }

  return tagBuffer;
};

var decryptAES256GCMWithPassword = function decryptAES256GCMWithPassword(encryptedPassphrase, password) {
  var _encryptedPassphrase$ = encryptedPassphrase.iterations,
      iterations = _encryptedPassphrase$ === void 0 ? PBKDF2_ITERATIONS : _encryptedPassphrase$,
      cipherText = encryptedPassphrase.cipherText,
      iv = encryptedPassphrase.iv,
      salt = encryptedPassphrase.salt,
      tag = encryptedPassphrase.tag;
  var tagBuffer = getTagBuffer(tag);
  var key = getKeyFromPassword(password, (0, _buffer.hexToBuffer)(salt, "Salt"), iterations);

  var decipher = _crypto.default.createDecipheriv("aes-256-gcm", key, (0, _buffer.hexToBuffer)(iv, "IV"));

  decipher.setAuthTag(tagBuffer);
  var firstBlock = decipher.update((0, _buffer.hexToBuffer)(cipherText, "Cipher text"));
  var decrypted = Buffer.concat([firstBlock, decipher.final()]);
  return decrypted.toString();
};

var encryptPassphraseWithPassword = encryptAES256GCMWithPassword;
exports.encryptPassphraseWithPassword = encryptPassphraseWithPassword;
var decryptPassphraseWithPassword = decryptAES256GCMWithPassword;
exports.decryptPassphraseWithPassword = decryptPassphraseWithPassword;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,