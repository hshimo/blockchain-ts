"use strict";

var _blockchainApp = _interopRequireDefault(require("../../blockchain/blockchainApp"));

var _keypair = _interopRequireDefault(require("keypair"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var aes256 = require("aes256");

var bc1 = new _blockchainApp.default();
var friends = [];
var cypher = (0, _keypair.default)();
friends.push(aes256.encrypt("format", cypher.public));
var bc2 = new _blockchainApp.default(cypher.private, cypher.public);
var cypher2 = (0, _keypair.default)();
friends.push(aes256.encrypt("format", cypher2.public));
var bc3 = new _blockchainApp.default(cypher2.private, cypher2.public);
console.log({
  friends: friends
});
var tran = bc1.multisig.makeNewMultiSigAddress(friends, 2, 0.3);
console.log(bc2.address, bc3.address);
bc2.multisig.responder(tran);
bc3.multisig.responder(tran);
var multisigAddress = Object.keys(bc1.multisig.multiSig)[0];
tran = bc1.multisig.makeMultiSigTransaction(multisigAddress, 0.4);

bc2.multisig.events.onMultisigTran["test"] = function (info) {
  console.log("bc2.multisig.events.onMultisigTran[\"test\"] = (info: multisigInfo) => {");
  var tran = bc2.multisig.approveMultiSig(info); //   console.log({ tran });

  bc1.multisig.responder(tran);
};

if (tran) bc2.multisig.responder(tran);

bc3.multisig.events.onMultisigTran["test"] = function (info) {
  console.log("bc3.multisig.events.onMultisigTran[\"test\"] = (info: multisigInfo) => {");
  var tran = bc3.multisig.approveMultiSig(info); //   console.log({ tran });

  bc1.multisig.responder(tran);
};

if (tran) bc3.multisig.responder(tran);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L2Jsb2NrY2hhaW4vbXVsdGlzaWcudGVzdC50cyJdLCJuYW1lcyI6WyJhZXMyNTYiLCJyZXF1aXJlIiwiYmMxIiwiQmxvY2tDaGFpbiIsImZyaWVuZHMiLCJjeXBoZXIiLCJwdXNoIiwiZW5jcnlwdCIsInB1YmxpYyIsImJjMiIsInByaXZhdGUiLCJjeXBoZXIyIiwiYmMzIiwiY29uc29sZSIsImxvZyIsInRyYW4iLCJtdWx0aXNpZyIsIm1ha2VOZXdNdWx0aVNpZ0FkZHJlc3MiLCJhZGRyZXNzIiwicmVzcG9uZGVyIiwibXVsdGlzaWdBZGRyZXNzIiwiT2JqZWN0Iiwia2V5cyIsIm11bHRpU2lnIiwibWFrZU11bHRpU2lnVHJhbnNhY3Rpb24iLCJldmVudHMiLCJvbk11bHRpc2lnVHJhbiIsImluZm8iLCJhcHByb3ZlTXVsdGlTaWciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxJQUFJQSxNQUFNLEdBQUdDLE9BQU8sQ0FBQyxRQUFELENBQXBCOztBQUVBLElBQU1DLEdBQUcsR0FBRyxJQUFJQyxzQkFBSixFQUFaO0FBRUEsSUFBTUMsT0FBTyxHQUFHLEVBQWhCO0FBQ0EsSUFBTUMsTUFBTSxHQUFHLHVCQUFmO0FBQ0FELE9BQU8sQ0FBQ0UsSUFBUixDQUFhTixNQUFNLENBQUNPLE9BQVAsQ0FBZSxRQUFmLEVBQXlCRixNQUFNLENBQUNHLE1BQWhDLENBQWI7QUFDQSxJQUFNQyxHQUFHLEdBQUcsSUFBSU4sc0JBQUosQ0FBZUUsTUFBTSxDQUFDSyxPQUF0QixFQUErQkwsTUFBTSxDQUFDRyxNQUF0QyxDQUFaO0FBQ0EsSUFBTUcsT0FBTyxHQUFHLHVCQUFoQjtBQUNBUCxPQUFPLENBQUNFLElBQVIsQ0FBYU4sTUFBTSxDQUFDTyxPQUFQLENBQWUsUUFBZixFQUF5QkksT0FBTyxDQUFDSCxNQUFqQyxDQUFiO0FBQ0EsSUFBTUksR0FBRyxHQUFHLElBQUlULHNCQUFKLENBQWVRLE9BQU8sQ0FBQ0QsT0FBdkIsRUFBZ0NDLE9BQU8sQ0FBQ0gsTUFBeEMsQ0FBWjtBQUNBSyxPQUFPLENBQUNDLEdBQVIsQ0FBWTtBQUFFVixFQUFBQSxPQUFPLEVBQVBBO0FBQUYsQ0FBWjtBQUVBLElBQUlXLElBQVMsR0FBR2IsR0FBRyxDQUFDYyxRQUFKLENBQWFDLHNCQUFiLENBQW9DYixPQUFwQyxFQUE2QyxDQUE3QyxFQUFnRCxHQUFoRCxDQUFoQjtBQUNBUyxPQUFPLENBQUNDLEdBQVIsQ0FBWUwsR0FBRyxDQUFDUyxPQUFoQixFQUF5Qk4sR0FBRyxDQUFDTSxPQUE3QjtBQUNBVCxHQUFHLENBQUNPLFFBQUosQ0FBYUcsU0FBYixDQUF1QkosSUFBdkI7QUFDQUgsR0FBRyxDQUFDSSxRQUFKLENBQWFHLFNBQWIsQ0FBdUJKLElBQXZCO0FBRUEsSUFBTUssZUFBZSxHQUFHQyxNQUFNLENBQUNDLElBQVAsQ0FBWXBCLEdBQUcsQ0FBQ2MsUUFBSixDQUFhTyxRQUF6QixFQUFtQyxDQUFuQyxDQUF4QjtBQUNBUixJQUFJLEdBQUdiLEdBQUcsQ0FBQ2MsUUFBSixDQUFhUSx1QkFBYixDQUFxQ0osZUFBckMsRUFBc0QsR0FBdEQsQ0FBUDs7QUFFQVgsR0FBRyxDQUFDTyxRQUFKLENBQWFTLE1BQWIsQ0FBb0JDLGNBQXBCLENBQW1DLE1BQW5DLElBQTZDLFVBQUNDLElBQUQsRUFBd0I7QUFDbkVkLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUjtBQUdBLE1BQU1DLElBQVMsR0FBR04sR0FBRyxDQUFDTyxRQUFKLENBQWFZLGVBQWIsQ0FBNkJELElBQTdCLENBQWxCLENBSm1FLENBS25FOztBQUNBekIsRUFBQUEsR0FBRyxDQUFDYyxRQUFKLENBQWFHLFNBQWIsQ0FBdUJKLElBQXZCO0FBQ0QsQ0FQRDs7QUFRQSxJQUFJQSxJQUFKLEVBQVVOLEdBQUcsQ0FBQ08sUUFBSixDQUFhRyxTQUFiLENBQXVCSixJQUF2Qjs7QUFFVkgsR0FBRyxDQUFDSSxRQUFKLENBQWFTLE1BQWIsQ0FBb0JDLGNBQXBCLENBQW1DLE1BQW5DLElBQTZDLFVBQUNDLElBQUQsRUFBd0I7QUFDbkVkLEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUjtBQUdBLE1BQU1DLElBQVMsR0FBR0gsR0FBRyxDQUFDSSxRQUFKLENBQWFZLGVBQWIsQ0FBNkJELElBQTdCLENBQWxCLENBSm1FLENBS25FOztBQUNBekIsRUFBQUEsR0FBRyxDQUFDYyxRQUFKLENBQWFHLFNBQWIsQ0FBdUJKLElBQXZCO0FBQ0QsQ0FQRDs7QUFRQSxJQUFJQSxJQUFKLEVBQVVILEdBQUcsQ0FBQ0ksUUFBSixDQUFhRyxTQUFiLENBQXVCSixJQUF2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCbG9ja0NoYWluIGZyb20gXCIuLi8uLi9ibG9ja2NoYWluL2Jsb2NrY2hhaW5BcHBcIjtcbmltcG9ydCBrZXlwYWlyIGZyb20gXCJrZXlwYWlyXCI7XG5pbXBvcnQgeyBtdWx0aXNpZ0luZm8gfSBmcm9tIFwiLi4vLi4vYmxvY2tjaGFpbi9pbnRlcmZhY2VcIjtcbnZhciBhZXMyNTYgPSByZXF1aXJlKFwiYWVzMjU2XCIpO1xuXG5jb25zdCBiYzEgPSBuZXcgQmxvY2tDaGFpbigpO1xuXG5jb25zdCBmcmllbmRzID0gW107XG5jb25zdCBjeXBoZXIgPSBrZXlwYWlyKCk7XG5mcmllbmRzLnB1c2goYWVzMjU2LmVuY3J5cHQoXCJmb3JtYXRcIiwgY3lwaGVyLnB1YmxpYykpO1xuY29uc3QgYmMyID0gbmV3IEJsb2NrQ2hhaW4oY3lwaGVyLnByaXZhdGUsIGN5cGhlci5wdWJsaWMpO1xuY29uc3QgY3lwaGVyMiA9IGtleXBhaXIoKTtcbmZyaWVuZHMucHVzaChhZXMyNTYuZW5jcnlwdChcImZvcm1hdFwiLCBjeXBoZXIyLnB1YmxpYykpO1xuY29uc3QgYmMzID0gbmV3IEJsb2NrQ2hhaW4oY3lwaGVyMi5wcml2YXRlLCBjeXBoZXIyLnB1YmxpYyk7XG5jb25zb2xlLmxvZyh7IGZyaWVuZHMgfSk7XG5cbmxldCB0cmFuOiBhbnkgPSBiYzEubXVsdGlzaWcubWFrZU5ld011bHRpU2lnQWRkcmVzcyhmcmllbmRzLCAyLCAwLjMpO1xuY29uc29sZS5sb2coYmMyLmFkZHJlc3MsIGJjMy5hZGRyZXNzKTtcbmJjMi5tdWx0aXNpZy5yZXNwb25kZXIodHJhbik7XG5iYzMubXVsdGlzaWcucmVzcG9uZGVyKHRyYW4pO1xuXG5jb25zdCBtdWx0aXNpZ0FkZHJlc3MgPSBPYmplY3Qua2V5cyhiYzEubXVsdGlzaWcubXVsdGlTaWcpWzBdO1xudHJhbiA9IGJjMS5tdWx0aXNpZy5tYWtlTXVsdGlTaWdUcmFuc2FjdGlvbihtdWx0aXNpZ0FkZHJlc3MsIDAuNCk7XG5cbmJjMi5tdWx0aXNpZy5ldmVudHMub25NdWx0aXNpZ1RyYW5bXCJ0ZXN0XCJdID0gKGluZm86IG11bHRpc2lnSW5mbykgPT4ge1xuICBjb25zb2xlLmxvZyhcbiAgICBgYmMyLm11bHRpc2lnLmV2ZW50cy5vbk11bHRpc2lnVHJhbltcInRlc3RcIl0gPSAoaW5mbzogbXVsdGlzaWdJbmZvKSA9PiB7YFxuICApO1xuICBjb25zdCB0cmFuOiBhbnkgPSBiYzIubXVsdGlzaWcuYXBwcm92ZU11bHRpU2lnKGluZm8pO1xuICAvLyAgIGNvbnNvbGUubG9nKHsgdHJhbiB9KTtcbiAgYmMxLm11bHRpc2lnLnJlc3BvbmRlcih0cmFuKTtcbn07XG5pZiAodHJhbikgYmMyLm11bHRpc2lnLnJlc3BvbmRlcih0cmFuKTtcblxuYmMzLm11bHRpc2lnLmV2ZW50cy5vbk11bHRpc2lnVHJhbltcInRlc3RcIl0gPSAoaW5mbzogbXVsdGlzaWdJbmZvKSA9PiB7XG4gIGNvbnNvbGUubG9nKFxuICAgIGBiYzMubXVsdGlzaWcuZXZlbnRzLm9uTXVsdGlzaWdUcmFuW1widGVzdFwiXSA9IChpbmZvOiBtdWx0aXNpZ0luZm8pID0+IHtgXG4gICk7XG4gIGNvbnN0IHRyYW46IGFueSA9IGJjMy5tdWx0aXNpZy5hcHByb3ZlTXVsdGlTaWcoaW5mbyk7XG4gIC8vICAgY29uc29sZS5sb2coeyB0cmFuIH0pO1xuICBiYzEubXVsdGlzaWcucmVzcG9uZGVyKHRyYW4pO1xufTtcbmlmICh0cmFuKSBiYzMubXVsdGlzaWcucmVzcG9uZGVyKHRyYW4pO1xuIl19