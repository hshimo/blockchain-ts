"use strict";

var _ava = _interopRequireDefault(require("ava"));

var _contractVM = _interopRequireDefault(require("../../contract/contractVM"));

var _cypher = _interopRequireDefault(require("../../contract/std/cypher"));

var _blockchainApp = _interopRequireDefault(require("../../blockchain/blockchainApp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var contract = {
  state: {
    num: 0
  },
  reducers: {
    increment: "prev.num++;",
    decrement: "prev.num--;",
    add: "prev.num += parseInt(data.num, 10)",
    minus: "prev.num -= parseInt(data.num, 10)",
    mult: "prev.num *= parseInt(data.num, 10)",
    div: "prev.num /= parseInt(data.num, 10)"
  }
};
var blockchain = new _blockchainApp.default();
var account = blockchain.accout;
var cypher = new _cypher.default(account);
var sign = cypher.signMessage(Math.random().toString());
var vm = new _contractVM.default(contract, blockchain, sign, "test");
console.log("code", vm.code, vm.idHash);
console.log("vm state", vm.state);
vm.messageCall("increment");
vm.messageCall("increment");
vm.messageCall("increment");
vm.messageCall("decrement");
vm.messageCall("add", {
  num: 10
});
vm.messageCall("minus", {
  num: 3
});
vm.messageCall("mult", {
  num: 2
});
vm.messageCall("div", {
  num: 4
});
console.log("vm state", vm.state, vm.getState("num"));
(0, _ava.default)("vm", function (test) {
  test.is(vm.getState("num"), 4.5);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy90ZXN0L2NvbnRyYWN0L3ZtLnRlc3QudHMiXSwibmFtZXMiOlsiY29udHJhY3QiLCJzdGF0ZSIsIm51bSIsInJlZHVjZXJzIiwiaW5jcmVtZW50IiwiZGVjcmVtZW50IiwiYWRkIiwibWludXMiLCJtdWx0IiwiZGl2IiwiYmxvY2tjaGFpbiIsIkJsb2NrQ2hhaW5BcHAiLCJhY2NvdW50IiwiYWNjb3V0IiwiY3lwaGVyIiwiQ3lwaGVyIiwic2lnbiIsInNpZ25NZXNzYWdlIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwidm0iLCJDb250cmFjdFZNIiwiY29uc29sZSIsImxvZyIsImNvZGUiLCJpZEhhc2giLCJtZXNzYWdlQ2FsbCIsImdldFN0YXRlIiwidGVzdCIsImlzIl0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTUEsUUFBbUIsR0FBRztBQUMxQkMsRUFBQUEsS0FBSyxFQUFFO0FBQUVDLElBQUFBLEdBQUcsRUFBRTtBQUFQLEdBRG1CO0FBRTFCQyxFQUFBQSxRQUFRLEVBQUU7QUFDUkMsSUFBQUEsU0FBUyxFQUFFLGFBREg7QUFFUkMsSUFBQUEsU0FBUyxFQUFFLGFBRkg7QUFHUkMsSUFBQUEsR0FBRyxFQUFFLG9DQUhHO0FBSVJDLElBQUFBLEtBQUssRUFBRSxvQ0FKQztBQUtSQyxJQUFBQSxJQUFJLEVBQUUsb0NBTEU7QUFNUkMsSUFBQUEsR0FBRyxFQUFFO0FBTkc7QUFGZ0IsQ0FBNUI7QUFZQSxJQUFNQyxVQUFVLEdBQUcsSUFBSUMsc0JBQUosRUFBbkI7QUFDQSxJQUFNQyxPQUFPLEdBQUdGLFVBQVUsQ0FBQ0csTUFBM0I7QUFDQSxJQUFNQyxNQUFNLEdBQUcsSUFBSUMsZUFBSixDQUFXSCxPQUFYLENBQWY7QUFDQSxJQUFNSSxJQUFJLEdBQUdGLE1BQU0sQ0FBQ0csV0FBUCxDQUFtQkMsSUFBSSxDQUFDQyxNQUFMLEdBQWNDLFFBQWQsRUFBbkIsQ0FBYjtBQUNBLElBQU1DLEVBQUUsR0FBRyxJQUFJQyxtQkFBSixDQUFldEIsUUFBZixFQUF5QlUsVUFBekIsRUFBcUNNLElBQXJDLEVBQTJDLE1BQTNDLENBQVg7QUFFQU8sT0FBTyxDQUFDQyxHQUFSLENBQVksTUFBWixFQUFvQkgsRUFBRSxDQUFDSSxJQUF2QixFQUE2QkosRUFBRSxDQUFDSyxNQUFoQztBQUVBSCxPQUFPLENBQUNDLEdBQVIsQ0FBWSxVQUFaLEVBQXdCSCxFQUFFLENBQUNwQixLQUEzQjtBQUNBb0IsRUFBRSxDQUFDTSxXQUFILENBQWUsV0FBZjtBQUNBTixFQUFFLENBQUNNLFdBQUgsQ0FBZSxXQUFmO0FBQ0FOLEVBQUUsQ0FBQ00sV0FBSCxDQUFlLFdBQWY7QUFDQU4sRUFBRSxDQUFDTSxXQUFILENBQWUsV0FBZjtBQUNBTixFQUFFLENBQUNNLFdBQUgsQ0FBZSxLQUFmLEVBQXNCO0FBQUV6QixFQUFBQSxHQUFHLEVBQUU7QUFBUCxDQUF0QjtBQUNBbUIsRUFBRSxDQUFDTSxXQUFILENBQWUsT0FBZixFQUF3QjtBQUFFekIsRUFBQUEsR0FBRyxFQUFFO0FBQVAsQ0FBeEI7QUFDQW1CLEVBQUUsQ0FBQ00sV0FBSCxDQUFlLE1BQWYsRUFBdUI7QUFBRXpCLEVBQUFBLEdBQUcsRUFBRTtBQUFQLENBQXZCO0FBQ0FtQixFQUFFLENBQUNNLFdBQUgsQ0FBZSxLQUFmLEVBQXNCO0FBQUV6QixFQUFBQSxHQUFHLEVBQUU7QUFBUCxDQUF0QjtBQUNBcUIsT0FBTyxDQUFDQyxHQUFSLENBQVksVUFBWixFQUF3QkgsRUFBRSxDQUFDcEIsS0FBM0IsRUFBa0NvQixFQUFFLENBQUNPLFFBQUgsQ0FBWSxLQUFaLENBQWxDO0FBRUEsa0JBQUssSUFBTCxFQUFXLFVBQUFDLElBQUksRUFBSTtBQUNqQkEsRUFBQUEsSUFBSSxDQUFDQyxFQUFMLENBQVFULEVBQUUsQ0FBQ08sUUFBSCxDQUFZLEtBQVosQ0FBUixFQUE0QixHQUE1QjtBQUNELENBRkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdGVzdCBmcm9tIFwiYXZhXCI7XG5pbXBvcnQgQ29udHJhY3RWTSwgeyBJY29udHJhY3QgfSBmcm9tIFwiLi4vLi4vY29udHJhY3QvY29udHJhY3RWTVwiO1xuaW1wb3J0IEN5cGhlciBmcm9tIFwiLi4vLi4vY29udHJhY3Qvc3RkL2N5cGhlclwiO1xuaW1wb3J0IEJsb2NrQ2hhaW5BcHAgZnJvbSBcIi4uLy4uL2Jsb2NrY2hhaW4vYmxvY2tjaGFpbkFwcFwiO1xuXG5jb25zdCBjb250cmFjdDogSWNvbnRyYWN0ID0ge1xuICBzdGF0ZTogeyBudW06IDAgfSxcbiAgcmVkdWNlcnM6IHtcbiAgICBpbmNyZW1lbnQ6IFwicHJldi5udW0rKztcIixcbiAgICBkZWNyZW1lbnQ6IFwicHJldi5udW0tLTtcIixcbiAgICBhZGQ6IFwicHJldi5udW0gKz0gcGFyc2VJbnQoZGF0YS5udW0sIDEwKVwiLFxuICAgIG1pbnVzOiBcInByZXYubnVtIC09IHBhcnNlSW50KGRhdGEubnVtLCAxMClcIixcbiAgICBtdWx0OiBcInByZXYubnVtICo9IHBhcnNlSW50KGRhdGEubnVtLCAxMClcIixcbiAgICBkaXY6IFwicHJldi5udW0gLz0gcGFyc2VJbnQoZGF0YS5udW0sIDEwKVwiXG4gIH1cbn07XG5cbmNvbnN0IGJsb2NrY2hhaW4gPSBuZXcgQmxvY2tDaGFpbkFwcCgpO1xuY29uc3QgYWNjb3VudCA9IGJsb2NrY2hhaW4uYWNjb3V0O1xuY29uc3QgY3lwaGVyID0gbmV3IEN5cGhlcihhY2NvdW50KTtcbmNvbnN0IHNpZ24gPSBjeXBoZXIuc2lnbk1lc3NhZ2UoTWF0aC5yYW5kb20oKS50b1N0cmluZygpKTtcbmNvbnN0IHZtID0gbmV3IENvbnRyYWN0Vk0oY29udHJhY3QsIGJsb2NrY2hhaW4sIHNpZ24sIFwidGVzdFwiKTtcblxuY29uc29sZS5sb2coXCJjb2RlXCIsIHZtLmNvZGUsIHZtLmlkSGFzaCk7XG5cbmNvbnNvbGUubG9nKFwidm0gc3RhdGVcIiwgdm0uc3RhdGUpO1xudm0ubWVzc2FnZUNhbGwoXCJpbmNyZW1lbnRcIik7XG52bS5tZXNzYWdlQ2FsbChcImluY3JlbWVudFwiKTtcbnZtLm1lc3NhZ2VDYWxsKFwiaW5jcmVtZW50XCIpO1xudm0ubWVzc2FnZUNhbGwoXCJkZWNyZW1lbnRcIik7XG52bS5tZXNzYWdlQ2FsbChcImFkZFwiLCB7IG51bTogMTAgfSk7XG52bS5tZXNzYWdlQ2FsbChcIm1pbnVzXCIsIHsgbnVtOiAzIH0pO1xudm0ubWVzc2FnZUNhbGwoXCJtdWx0XCIsIHsgbnVtOiAyIH0pO1xudm0ubWVzc2FnZUNhbGwoXCJkaXZcIiwgeyBudW06IDQgfSk7XG5jb25zb2xlLmxvZyhcInZtIHN0YXRlXCIsIHZtLnN0YXRlLCB2bS5nZXRTdGF0ZShcIm51bVwiKSk7XG5cbnRlc3QoXCJ2bVwiLCB0ZXN0ID0+IHtcbiAgdGVzdC5pcyh2bS5nZXRTdGF0ZShcIm51bVwiKSwgNC41KTtcbn0pO1xuIl19